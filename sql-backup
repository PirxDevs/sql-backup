#!/bin/bash

# Copyright (C) 2007-2009 Pirx Developers - https://pirx.dev/

BACKUP_CONF="/root/cron/sql-backup.conf"
BACKUP_DIR="/mnt/backup"
BACKUP_DATE=`date +"%Y%m%d"`

OLDIFS=$IFS
IFS="
"
DATE=`date +"%d.%m.%Y"`

for entry in `cat $BACKUP_CONF | grep -v "^#" | grep -v "^$"`; do
    type=`echo "$entry" | awk -F ":" '{ print $1}'`
    pass=`echo "$entry" | awk -F ":" '{ print $2}'`
    days=`echo "$entry" | awk -F ":" '{ print $3}'`
    echo `date +"%d-%m-%Y %H:%M:%S"` "Processing $type"
    if ! test -d $BACKUP_DIR/$type; then
	mkdir -p $BACKUP_DIR/$type
    fi
    if [ "$type" = "pgsql" ]; then
	export PGUSER="postgres"
	export PGPASSWORD=$pass
	db_list=`psql -q -t -c "select datname from pg_database;" template1 | grep -v "template0" | sort | sed -e 's/^[ ]*//g'`
    elif [ "$type" = "mysql" ]; then
	db_list=`mysql -u root -S /var/run/mysqld/mysqld.sock --password="$pass" -e "show databases;" | grep -v "Database"`
    else
	echo "skipping, unknown DB type $type"
	continue
    fi
    BACKUP_PATH="$BACKUP_DIR/$type/$BACKUP_DATE"
    if ! test -d $BACKUP_PATH; then
	install -d $BACKUP_PATH
    else
	echo "  skipping, backup for $DATE already exists"
	continue
    fi
    echo "  removing backups older than $days days"
    find $BACKUP_DIR/$type -mindepth 1 -type d -mtime +$days -exec rm -rf {} \; >/dev/null 2>&1
    if [ "$type" = "pgsql" ]; then
	echo "  global data -> $BACKUP_PATH/pgsql_globals.gz"
	pg_dumpall -g | gzip > $BACKUP_PATH/pgsql_globals.gz
    fi
    for db in $db_list; do
	echo "  $db -> $BACKUP_PATH/$db.gz"
        if [ "$type" = "pgsql" ]; then
	    pg_dump -b -Ft $db | gzip > $BACKUP_PATH/$db.tar.gz
        elif [ "$type" = "mysql" ]; then
            if [ "x$db" = "xinformation_schema" ]; then
	      mysqldump -u root --single-transaction -R -c -E -e --create-options --triggers --hex-blob -S /var/run/mysqld/mysqld.sock --password=$pass $db | gzip > $BACKUP_PATH/$db.gz
	    else
	      mysqldump -u root -R -c -E -e --create-options --triggers --hex-blob -S /var/run/mysqld/mysqld.sock --password=$pass $db | gzip > $BACKUP_PATH/$db.gz
	    fi
	fi
    done
done

IFS=$OLDIFS
