#!/bin/bash

# Copyright (C) 2007-2022 Pirx Developers - https://pirx.dev/
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

SCRIPT_DIR=$(realpath "${0}")
SCRIPT_DIR=$(dirname "${SCRIPT_DIR}")

if test -f "${SCRIPT_DIR}/sql-backup.func"; then
  . "${SCRIPT_DIR}/sql-backup.func"
else
  echo "Function file not found or not readable"
  exit 1
fi

if test -f "${SCRIPT_DIR}/sql-backup.conf"; then
  . "${SCRIPT_DIR}/sql-backup.conf"
else
  echo "Configuration file not found or not readable"
  exit 1
fi

BACKUP_DATE=$(date +"${BACKUP_DATE_FORMAT}")

if ! test -z "$@"; then
  BACKUP_JOBS="$@"
fi

for job in ${BACKUP_JOBS}; do
  if test -f "${SCRIPT_DIR}/jobs/${job}.conf"; then
    db_type=""
    db_version=""
    db_host=""
    db_port=""
    db_user=""
    db_password=""
    smtp_host=""
    smtp_port=""
    smtp_user=""
    smtp_password=""
    mail_from=""
    mail_name=""
    retention_days=""
    databases=""
    excludes=""
    data_excludes=""
    report_emails=""
    gpg_password=""
    curl_options=""
    . "${SCRIPT_DIR}/jobs/${job}.conf"
  else
    echo "Configuration for job \"${job}\" not found or not readable, skipping"
    continue
  fi
  job_log_file=$(mktemp 2>/dev/null)
  job_error_file=$(mktemp 2>/dev/null)
  job_dblist_file=$(mktemp 2>/dev/null)
  echo "$(date +"%d-%m-%Y %H:%M:%S") Running backup job ${job}" | tee -a "${job_log_file}"
  if ! test -d "${BACKUP_ROOT_DIR}/${job}"; then
    install -m 700 -d "${BACKUP_ROOT_DIR}" "${BACKUP_ROOT_DIR}/${job}"
  fi
  if [ "${db_type}" = "pgsql" ]; then
    echo "  Server type: PostgreSQL ${db_version}" | tee -a "${job_log_file}"
    export PGUSER="${db_user}"
    export PGPASSWORD="${db_password}"
    POSTGRESQL_BIN_DIR=$(echo "${POSTGRESQL_BIN_DIR}" | sed -e 's/%v/'${db_version}'/' 2>/dev/null)
    if test -z "${databases}"; then
      ${POSTGRESQL_BIN_DIR}/psql -q -t -h ${db_host} -p ${db_port} -c "select datname from pg_database;" template1 2>"${job_error_file}" | grep -v "template0" | sort | sed -e 's/^[ ]*//g' 1>"${job_dblist_file}"
      if test -s "${job_error_file}"; then
        echo "  Error reading list of databases" | tee -a "${job_log_file}"
        cat "${job_error_file}" | tee -a "${job_log_file}"
        rm -f "${job_error_file}" "${job_dblist_file}"
        job_status="FAILED"
        send_email
        continue
      fi
    else
      for db in "${databases}"; do
        echo "${db}" >>"${job_dblist_file}"
      done
    fi
  elif [ "${db_type}" = "mysql" ]; then
    echo "  Server type: MySQL ${db_version}" | tee -a "${job_log_file}"
    export MYSQL_PWD="${db_password}"
    if test -z "${databases}"; then
      mysql -u "${db_user}" -h ${db_host} -e "show databases;" 2>"${job_error_file}" | grep -Ev "(Database|information_schema|performance_schema)" 1>"${job_dblist_file}"
      if test -s "${job_error_file}"; then
        echo "  Error reading list of databases" | tee -a "${job_log_file}"
        cat "${job_error_file}" | tee -a "${job_log_file}"
        rm -f "${job_error_file}" "${job_dblist_file}"
        job_status="FAILED"
        send_email
        continue
      fi
    else
      for db in "${databases}"; do
        echo "${db}" >>"${job_dblist_file}"
      done
    fi
  else
    echo "Skipping, unknown DB type ${db_type}" | tee -a "${job_log_file}"
    job_status="FAILED"
    send_email
    continue
  fi
  rm -f "${job_error_file}"
  BACKUP_PATH="${BACKUP_ROOT_DIR}/${job}/${BACKUP_DATE}"
  if ! test -d "${BACKUP_PATH}"; then
    install -m 700 -d "${BACKUP_PATH}"
  else
    echo "  Skipping, backup for ${BACKUP_DATE} already exists" | tee -a "${job_log_file}"
    job_status="FAILED"
    send_email
    rm -f "${job_dblist_file}"
    continue
  fi
  if ! test -z "${retention_days}" && echo "${retention_days}" | grep -q -E "^[0-9]+$";  then
    echo "  Removing backups older than ${retention_days} days" | tee -a "${job_log_file}"
    find "${BACKUP_ROOT_DIR}/${job}" -mindepth 1 -type d -mtime +${retention_days} -exec rm -rf {} \; 1>/dev/null 2>&1
  fi
  if [ "${db_type}" = "pgsql" ]; then
    if test -z "${databases}"; then
      backup_cmd="${POSTGRESQL_BIN_DIR}/pg_dumpall -g -h ${db_host} -p ${db_port} 2>\"${job_error_file}.log\" | gzip 2>/dev/null"
      backup_file="${BACKUP_PATH}/pgsql_globals.gz"
      if ! test -z "${gpg_password}"; then
        backup_cmd="${backup_cmd} | gpg -c --batch --no-tty --yes --passphrase ${gpg_password} 2>/dev/null"
        backup_file="${backup_file}.gpg"
      fi
      backup_cmd="${backup_cmd} > ${backup_file}"
      backup_file_name=$(basename "${backup_file}")
      echo -n "  PostgreSQL globals -> ${backup_file_name} " | tee -a "${job_log_file}"
      eval "${backup_cmd}"
      if test -f "${backup_file}"; then
        chmod 600 "${backup_file}"
      fi
      if test -s "${job_error_file}.log"; then
        echo "FAILED" | tee -a "${job_log_file}"
        cat "${job_error_file}.log" | tee -a "${job_log_file}"
      else
        echo "OK (size $(du -h "${backup_file}" 2>&1 | awk -F" " '{print $1}'))" | tee -a "${job_log_file}"
      fi
    fi
  fi
  db_ok=0
  db_fail=0
  for db in $(cat "${job_dblist_file}"); do
    backup_opts=""
    no_data=""
    exclude_tables=""
    data_exclude_tables=""
    for exclude in ${excludes}; do
      if echo "${exclude}" | grep -q -E "^"${db}; then
        if [ "${db}" = "${exclude}" ]; then
          echo "  Database ${db} is on exclude list, skipped" | tee -a "${job_log_file}"
          continue 2
        else
          exclude_table="${exclude#*:}"
          exclude_table="${exclude_table//,/ }"
          exclude_tables="${exclude_tables} ${exclude_table}"
        fi
      fi
    done
    for data_exclude in ${data_excludes}; do
      if echo "${data_exclude}" | grep -q -E "^"${db}; then
        if [ "${db}" = "${data_exclude}" ]; then
          no_data="true"
          if [ "${db_type}" = "pgsql" ]; then
            backup_opts="${backup_opts} --schema-only"
          elif [ "${db_type}" = "mysql" ]; then
            backup_opts="${backup_opts} --no-data"
          fi
        else
          data_exclude_table="${data_exclude#*:}"
          data_exclude_table="${data_exclude_table//,/ }"
          data_exclude_tables="${data_exclude_tables} ${data_exclude_table}"
        fi
      fi
    done
    if [ "${db_type}" = "pgsql" ]; then
      for table in ${exclude_tables}; do
        if echo "${table}" | grep -q -E "\."; then
          schema="${table%%.*}"
          table="${table##*.}"
        else
          schema="public"
        fi
        table_name=$(echo "${schema}.${table}" | sed -r -e 's/([^\*\?\.]+)/"\1"/g;')
        backup_opts="${backup_opts} --exclude-table='${table_name}'"
      done
      for table in ${data_exclude_tables}; do
        if echo "${table}" | grep -q -E "\."; then
          schema="${table%%.*}"
          table="${table##*.}"
        else
          schema="public"
        fi
        table_name=$(echo "${schema}.${table}" | sed -r -e 's/([^\*\?\.]+)/"\1"/g;')
        backup_opts="${backup_opts} --exclude-table-data='${table_name}'"
      done
      backup_cmd="${POSTGRESQL_BIN_DIR}/pg_dump -b -Fc -h ${db_host} -p ${db_port} ${backup_opts} ${db} 2>\"${job_error_file}.log\""
      backup_file="${BACKUP_PATH}/${db}.dump"
      if ! test -z "${gpg_password}"; then
        backup_cmd="${backup_cmd} | gpg -c --batch --no-tty --yes --passphrase ${gpg_password} 2>/dev/null"
        backup_file="${backup_file}.gpg"
      fi
      backup_cmd="${backup_cmd} > ${backup_file}"
      backup_file_name=$(basename "${backup_file}")
      echo -n "  Database ${db} -> ${backup_file_name} " | tee -a "${job_log_file}"
      eval "${backup_cmd}"
      if test -f "${backup_file}"; then
        chmod 600 "${backup_file}"
      fi
      if test -s "${job_error_file}.log"; then
        echo "FAILED" | tee -a "${job_log_file}"
        cat "${job_error_file}.log" | tee -a "${job_log_file}"
        db_fail=$((db_fail + 1))
      else
        echo "OK (size $(du -h "${backup_file}" 2>&1 | awk -F" " '{print $1}'))" | tee -a "${job_log_file}"
        db_ok=$((db_ok + 1))
      fi
      if ! test -z "${no_data}"; then
        echo "    Schema only, no data" | tee -a "${job_log_file}"
      fi
      if ! test -z "${exclude_tables}"; then
        echo "    Skipped tables: ${exclude_tables} " | tee -a "${job_log_file}"
      fi
      if ! test -z "${data_exclude_tables}"; then
        echo "    Skipped data: ${data_exclude_tables} " | tee -a "${job_log_file}"
      fi
    elif [ "${db_type}" = "mysql" ]; then
      for table in ${exclude_tables}; do
        backup_opts="${backup_opts} --ignore-table=\"${db}.${table}\""
      done
      if mysqldump --help 2>/dev/null | grep -q "ignore-table-data"; then
        for table in ${data_exclude_tables}; do
          backup_opts="${backup_opts} --ignore-table-data=\"${db}.${table}\""
        done
      elif ! test -z "${data_exclude_tables}"; then
        data_exclude_tables="none, not supported by mysqldump"
      fi
      backup_cmd="mysqldump -u \"${db_user}\" -h ${db_host} -c --hex-blob --single-transaction --add-drop-database ${backup_opts} --databases ${db} 2>\"${job_error_file}.log\" | gzip 2>/dev/null"
      backup_file="${BACKUP_PATH}/${db}.gz"
      if ! test -z "${gpg_password}"; then
        backup_cmd="${backup_cmd} | gpg -c --batch --no-tty --yes --passphrase ${gpg_password} 2>/dev/null"
        backup_file="${backup_file}.gpg"
      fi
      backup_cmd="${backup_cmd} > ${backup_file}"
      backup_file_name=$(basename "${backup_file}")
      echo -n "  Database ${db} -> ${backup_file_name} " | tee -a "${job_log_file}"
      eval "${backup_cmd}"
      if test -f "${backup_file}"; then
        chmod 600 "${backup_file}"
      fi
      if test -s "${job_error_file}.log"; then
        echo "FAILED" | tee -a "${job_log_file}"
        cat "${job_error_file}.log" | tee -a "${job_log_file}"
        db_fail=$((db_fail + 1))
      else
        echo "OK (size $(du -h "${backup_file}" 2>&1 | awk -F" " '{print $1}'))" | tee -a "${job_log_file}"
        db_ok=$((db_ok + 1))
      fi
      if ! test -z "${no_data}"; then
        echo "    Schema only, no data" | tee -a "${job_log_file}"
      fi
      if ! test -z "${exclude_tables}"; then
        echo "    Skipped tables: ${exclude_tables} " | tee -a "${job_log_file}"
      fi
      if ! test -z "${data_exclude_tables}"; then
        echo "    Skipped data: ${data_exclude_tables} " | tee -a "${job_log_file}"
      fi
    fi
  done
  if [ ${db_fail} -eq 0 ]; then
    job_status="OK"
  else
    job_status="FAILED (${db_fail} errors, ${db_ok} ok)"
  fi
  send_email
  rm -f "${job_dblist_file}" "${job_error_file}.log"
done
